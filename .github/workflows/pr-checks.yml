name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  push:
    branches: [main, dev]

jobs:
  # Check PR description and format
  pr-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR Description
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr.body || pr.body.trim().length < 50) {
              core.setFailed('PR description must be at least 50 characters long');
            }

  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Generate build matrix
        id: set-matrix
        run: |
          matrix=$(python build.py --generate-matrix-release --variants-file variants.json)
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # Build firmware to ensure changes compile
  build-test:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache QMK dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/qmk_firmware/.build
          key: ${{ runner.os }}-qmk-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            avr-libc \
            binutils-arm-none-eabi \
            binutils-avr \
            gcc-arm-none-eabi \
            gcc-avr \
            python3-pip
          uv venv
          source .venv/bin/activate
          uv tool install qmk
          uv pip install -r requirements.txt
          qmk setup -y

      - name: Test build configuration
        run: |
          qmk config user.qmk_home=$GITHUB_WORKSPACE
          qmk config user.userspace=holykeebs
          python build.py --build-single \
            --keyboard "${{ matrix.keyboard }}" \
            --keymap "${{ matrix.keymap }}" \
            --left-device "${{ matrix.left_device }}" \
            --right-device "${{ matrix.right_device }}" \
            --side "${{ matrix.side }}"

      - name: Check firmware size
        run: |
          if [ -f "build_lily58/*.uf2" ]; then
            size=$(stat -c%s build_lily58/*.uf2 | head -1)
            echo "Firmware size: $size bytes"
            # RP2040 has 2MB flash, warn if over 1.5MB
            if [ $size -gt 1572864 ]; then
              echo "::warning::Firmware size is large ($size bytes), consider optimization"
            fi
          fi

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for debug code
        run: |
          # Check for common debug patterns
          if grep -r "console\.log\|print(\|TODO\|FIXME\|XXX" --include="*.c" --include="*.h" --include="*.py" .; then
            echo "::warning::Found debug code or TODO comments"
          fi

      - name: Check file permissions
        run: |
          # Ensure no files have executable bit set unnecessarily
          find . -type f -name "*.c" -o -name "*.h" -o -name "*.md" | xargs ls -la | grep -E "^-rwx" && \
            echo "::warning::Found source files with executable permissions" || true

  # Generate call graphs for drivers
  callgraph:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang graphviz
          pip3 install pydot
      - name: Build call graphs
        run: |
          make callgraph
          make callgraph-trackpoint
          make callgraph-cirque
          make callgraph-pimoroni
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: driver-callgraphs
          path: |
            docs/azoteq_callgraph.svg
            docs/trackpoint_callgraph.svg
            docs/cirque_callgraph.svg
            docs/pimoroni_callgraph.svg

  keymap-diagrams:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt-get update
          pip3 install qmk keymap-drawer
      - name: Generate keymap diagrams
        run: |
          python3 tools/draw_keymaps.py
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: keymap-diagrams
          path: |
            docs/keymap_lily58.svg
            docs/keymap_sweeq.svg
            docs/keymap_spankbd.svg
            docs/keymap_corne.svg
